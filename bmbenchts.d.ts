declare var global: any;
declare var module: any;
declare var require: any;
declare var System: any;
declare var VM: any;
declare var ARGS: any;
declare var java: any;
declare var Graal: any;
declare var bmBenchNoAutoStart: boolean | undefined;
declare const gState: {
    prgVersion: string;
    prgLanguage: string;
    mode: number;
    fnGetMs: () => number;
    fnGetPrecMs: ((stopFlg: boolean) => number) | undefined;
    startMs: number;
    bench1: number;
    bench2: number;
    n: number;
    benchList: ((n: number, state: Record<string, any>) => number)[];
    checkList: ((n: number) => number)[];
    nPerBench: number[];
    caliMs: number;
    deltaMs: number;
    maxMs: number;
    benchRes: number[];
    bench: number;
    tsType: string;
    tsPrecMs: number;
    tsPrecCnt: number;
    tsMeasCnt: number;
    bWantStop: boolean;
    fnLog: (...data: any[]) => void;
    fnDone: (() => void) | undefined;
    bench03Sieve: number[] | Uint8Array | undefined;
    bench05Line: number[] | Uint16Array | undefined;
    println: (s: string) => void;
    WScript: any;
    ScriptEngine: () => string;
    ScriptEngineMajorVersion: () => string;
    ScriptEngineMinorVersion: () => string;
    ScriptEngineBuildVersion: () => string;
};
declare function bench00(n: number): number;
declare function bench01(n: number): number;
declare function bench02(n: number): number;
declare function bench03(n: number, state: Partial<typeof gState>): number;
declare function bench04(n: number): number;
declare function bench05(n: number, state: Partial<typeof gState>): number;
declare function bench00Check(n: number): number;
declare function bench01Check(n: number): number;
declare function bench02Check(n: number): number;
declare function bench03Check(n: number): number;
declare function bench04Check(n: number): number;
declare function bench05Check(n: number): number;
declare function runBench(bench: number, loops: number, n: number, check: number): number;
declare function strNumFormat(s: string | number, iLen: number, sFillChar: string): string;
declare function strZeroFormat(s: string, iLen: number): string;
declare function strIntFormat(val: number, digits: number): string;
declare function strDoubleFormat(val: number, digits: number, prec: number): string;
declare function checkbitsInt(): number;
declare function checkbitsDouble(): number;
declare function getInfo(): string;
declare function printResults(bench1: number, bench2: number, benchRes: number[]): void;
declare function measureBench(bench: number, n: number, check: number): number;
declare function endBench(startMs: number): void;
declare function fnSetTimeout(func: () => void, time: number): void;
declare function doBench(): void;
declare function getMsPerformanceNow(): number;
declare function getMsDateNow(): number;
declare function getMsNewDate(): number;
declare function initMsGetter(): void;
declare function correctTime(tMeas: number, measCount: number): number;
declare function getPrecMs(stopFlg: boolean): number;
declare function determineTsPrecision(): void;
declare function onBenchmarkJsEvent(event: Event): void;
declare function runOneBenchmarkJs(this: Record<string, any>): any;
declare function benchmarkJsCreateFunction(i: number): {
    _n: number;
    _benchFn: (n: number, state: Record<string, any>) => number;
    fn: typeof runOneBenchmarkJs;
};
declare function doBenchmarkJs(): void;
declare function startBench(argMap: Record<string, any>, argStr: string): void;
declare function main(args: any[]): void;
declare function fnLogNGS(s: string): void;
declare function fnLogDMD(s: string): void;
declare function fnLogRhino(s: string): void;
declare function fnLogJScript(s: string): void;
declare function fnGetArguments(args: any[], startIndex: number): any[];
declare function fnGetWscriptArguments(args: typeof gState.WScript.Arguments): any[];
declare function fnGetNodeStdinArgs(): string[];
//# sourceMappingURL=bmbenchts.d.ts.map