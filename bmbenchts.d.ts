declare var System: any;
declare var VM: any;
declare var ScriptEngine: () => string;
declare var ScriptEngineMajorVersion: () => string;
declare var ScriptEngineMinorVersion: () => string;
declare var ScriptEngineBuildVersion: () => string;
declare var java: any;
declare var Graal: any;
declare var WScript: any;
declare var bmBenchNoAutoStart: boolean | undefined;
declare const gState: Record<string, any>;
declare function bench00(n: number): number;
declare function bench01(n: number): number;
declare function bench02(n: number): number;
declare function bench03(n: number): number;
declare function bench04(n: number): number;
declare function bench05(n: number): number;
declare function runBench(bench: number, loops: number, n: number, check: number): number;
declare function bench03Check(n: number): number;
declare function getCheck(bench: number, n: number): number;
declare function strNumFormat(s: string | number, iLen: number, sFillChar: string): string;
declare function strZeroFormat(s: string, iLen: number): string;
declare function strIntFormat(val: number, digits: number): string;
declare function strDoubleFormat(val: number, digits: number, prec: number): string;
declare function fnGetDate(): string;
declare function checkbitsInt(): number;
declare function checkbitsDouble(): number;
declare function getInfo(): string;
declare function printResults(bench1: number, bench2: number, benchRes: number[]): void;
declare function measureBench(bench: number, n: number, check: number): number;
declare function endBench(startMs: number): void;
declare function fnSetTimeout(func: () => void, time: number): void;
declare function doBench(): void;
declare function getMsPerformanceNow(): number;
declare function getMsDateNow(): number;
declare function getMsNewDate(): number;
declare function initMsGetter(): void;
declare function correctTime(tMeas: number, measCount: number): number;
declare function getPrecMs(stopFlg: boolean): any;
declare function determineTsPrecision(): void;
declare function doBenchmarkJs(): void;
declare function startBench(oArgs: any): void;
declare function main(args: any[]): void;
declare function fnLogRhino(s: string): void;
declare function fnLogJScript(s: string): void;
declare function fnGetArguments(args: any[], startIndex: number): any[];
declare function fnGetWscriptArguments(args: typeof WScript.Arguments): any[];
declare function fnGetNodeStdinArgs(): any;
//# sourceMappingURL=bmbenchts.d.ts.map