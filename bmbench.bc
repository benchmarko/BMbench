/* bmbench.bc (bc)
 * (c) Benchmarko, 2002
 *
 * 06.05.2002  0.01 first tests
 * 20.07.2002  0.04 some more functions
 *
 * Usage:
 * setenv BC_LINE_LENGTH 80 (csh)  export BC_LINE_LENGTH=80 (sh) (default 70)
 * bc bmbench.bc
 * (bc is an arbitrary precision calculator language)
 * The original POSIX bc has some limitations (e.g. one letter variables. if without else), so
 * we require GNU bc here. Tested with GNU bc version 1.06.
 *
 * Information:
 * man bc
 *
 */


  /*
   * General description for benchmark test functions
   * benchxx - benchmark
   * <description>
   * in: loops = number of loops
   *         n = maximum number (assumed even, normally n=1000000)
   * out:    x = <output decription>
   *
   * loops may be increased to produce a longer runtime without changing the result.
   */


  /*
   * bench01 (Integer 16/32 bit)
   * (sum of 1..n) mod 65536
   */
define bench01(loops, n) {
  auto i, x, sum;
  sum = ((n / 2) * (n + 1)); /* assuming n even! */
  x = 0;
  while (loops-- > 0) {
    for (i = n; i > 0; i--) {
      x += i;
    }
    if (loops > 0) {               /* some more loops left? */
      x -= sum;                    /* yes, set x back to 0 (assuming n even) */
      if (x != 0) {                /* now x must be 0 again */
        x++;
        break;
      }
    }
  }
  return(x % 65536);
}


  /*
   * run a benchmark
   * in: bench = benchmark to use
   *     loops = number of loops
   *         n = maximum number (used in some benchmarks to define size of workload)
   * out:    x = result
   */
define run_bench(bench, loops, n) {
  auto x, check1;
  x = 0;
  check1 = 0;
  if (bench == 0) {
    /* x = bench00(loops, n); */
    check1 = 10528;

  } else if (bench == 1) {
    x = bench01(loops, n);
    check1 = 10528;

  } else if (bench == 2) {
    /* x = bench02(loops, n); */
    check1 = 10528;

  } else if (bench == 3) {
    /* x = bench03(loops, n); */
    check1 = 41538;

  } else if (bench == 4) {
    /* x = bench04(loops, n); */
    check1 = 1227283347;

  } else if (bench == 5) {
    /* x = bench05(loops, n); */
    check1 = 27200; /* 58336; 43584; */

  } else {
    print "Error: Unknown benchmark: ", bench, "\n";
    check1 = x + 1; /* force error */
  }
  if (check1 != x) {
    print "Error(bench", bench, "): x=", x, "\n";
    x = -1; /* exit */
  }
  return(x);
}


last_time = 0;
define get_ms() {
  /* Sadly we don't have a time function in bc, so we cannot do any calibration */
  last_time += 20000;
  return(last_time);
}


define main() {
  auto start_t, bench1, bench2, n, bench, bench_res[], min_ms,  loops, x, t1;
  start_t = get_ms(); /* memorize start time */
  bench1 = 0;       /* first benchmark to test */
  bench2 = 2;       /* last benchmark to test */
  n = 1000000;      /* maximum number */
  min_ms = 10000;   /* minimum runtime for measurement in ms */
  bench = 0;
  /* bench_res1; */

  print "BM Bench v0.4 (bc)\n";

  for (bench = bench1; bench <= bench2; bench++) {
    loops = 1;   /* number of loops */
    x = 0;     /* result from benchmark */
    t1 = 0; /* timestamp */
    /* calibration */
    while (t1 < 1001) { /* we want at least 1001 ms calibration time */
      print "Calibrating benchmark ", bench, " with loops=", loops, ", n=", n, "\n";
      t1 = get_ms();
      print "Calibation ignored since we have no time function.\n"; /* x = run_bench(bench, loops, n); */
      t1 = get_ms() - t1;
      print "x=", x, " (time: ", t1, " ms)\n";
      loops *= 2;
      if (x == -1) {
        break;
      }
    }
    if (x != -1) {
      loops /= 2; /* div 2 */
      loops *= (min_ms / t1) + 1; /* integer division! */
      print "Calibration done. Starting measurement with ", loops, " loops to get >=", min_ms, " ms\n";

      /* measurement */
      t1 = get_ms();
      x = run_bench(bench, loops, n);
      t1 = get_ms() - t1;
      print "x=", x, " (time: ", t1, " ms)\n";
      print "Elapsed time for ", loops, " loops: ", t1, " ms; estimation for 10 loops: ", t1 * 10 / loops, " ms\n";
      bench_res1[bench] = (t1 * 10 / loops);
    } else {
      bench_res1[bench] = -1;
    }
  }
  print "Summary for 10 Loops:\n";
  for (bench = bench1; bench <= bench2; bench++) {
    print "Benchmark ", bench, ": ", bench_res1[bench], " ms\n";
  }
  print "Total elapsed time: ", (get_ms() - start_t), " ms\n";
  return(0);
}


main();
halt; /* end program (GNU bc) */
/* end */
